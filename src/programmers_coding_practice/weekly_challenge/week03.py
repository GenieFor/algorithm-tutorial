game_board = [
    [1,1,0,0,1,0],
    [0,0,1,0,1,0],
    [0,1,1,0,0,1],
    [1,1,0,1,1,1],
    [1,0,0,0,1,0],
    [0,1,1,1,0,0],
]

board2 = [
    [0,0,0],    # (0,0) (0,1) (0,2)
    [1,1,0],    # (1,0) (1,1) (1,2)
    [1,1,1],    # (2,0) (2,1) (2,2)
]

table2 = [
    [1,1,1],
    [1,0,0],
    [0,0,0],    
]

table2_test = [
    [1,0,0],
    [1,1,1],
    [0,0,0],    
]

table2_test = [
    [1,1,1],
    [1,0,0],
    [0,1,1],   
]


def solution(game_board, table):
    
    answer = -1
    """
    처음 아이디어
    다차원으로 이루어진 game_board 배열의 각각의 index를 (x, y)로 생각하고
    (x1 - y1) - (x2 - y2) = |1|, |1| 일 경우 새로운 []을 만들어서 하나의 도형으로 취급
    game_board의 line이 바뀔 경우, 기존 도형에 있는 모든 [] 안의 (x, y)를 loop하면서
    (x1 - y1) - (x2 - y2) = |1|, |1| 일 경우 기존의 []에 추가, 
    아닐 경우 새로운 []을 만들어서 하나의 도형으로 취급
    
    BUT, 도형의 모양 계산에서 막혀서 일단 보류 
    DFS(Depth First Search), BFS(Breadth First Search) 개념 공부 후 다시 도전
    """
    
    return answer
